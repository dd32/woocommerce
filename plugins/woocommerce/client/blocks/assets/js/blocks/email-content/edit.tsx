/**
 * External dependencies
 */
import { __ } from '@wordpress/i18n';
import { useState, useEffect, useRef } from '@wordpress/element';
import { useSelect } from '@wordpress/data';
import {
	__experimentalText as Text, // eslint-disable-line
} from '@wordpress/components';
// eslint-disable-next-line @woocommerce/dependency-group
import { store as editorStore } from '@wordpress/editor';

declare global {
	interface Window {
		// eslint-disable-next-line @typescript-eslint/naming-convention
		WooCommerceEmailEditor?: {
			email_types: Array< {
				value: string;
				id: string;
			} >;
			block_preview_url?: string;
		};
	}
}

function HoverContent() {
	return (
		<div
			style={ {
				margin: '20vh auto',
				maxWidth: 400,
				padding: 20,
				backgroundColor: '#fff',
				borderRadius: 4,
				boxShadow: '0 0 10px 0 rgba(0, 0, 0, 0.1)',
				textAlign: 'center',
				color: '#000',
			} }
		>
			<Text> { __( 'Autogenerated content', 'woocommerce' ) } </Text>
		</div>
	);
}

const updateIFrameBackgroundColor = (
	iframeRef: React.RefObject< HTMLIFrameElement >,
	isHovered: boolean
) => {
	if ( iframeRef?.current?.contentWindow?.document.body ) {
		iframeRef.current.contentWindow.document.body.style.overflow = 'hidden';
		iframeRef.current.contentWindow.document.body.style.pointerEvents =
			'none';
		iframeRef.current.contentWindow.document.body.style.backgroundColor =
			isHovered
				? '#00000059'
				: iframeRef.current.contentWindow?.document?.bgColor;
	}
};

const getEmailType = ( value: string ) => {
	return window.WooCommerceEmailEditor?.email_types?.find(
		( emailType ) => emailType.value === value
	)?.id;
};

const updateiFrameSource = (
	iframeRef: React.RefObject< HTMLIFrameElement >,
	url: string
) => {
	// Update iframe src using replace to avoid polluting browser history
	iframeRef?.current?.contentWindow?.location.replace( url );
};

const DEFAULT_EMAIL_TYPE = 'WC_Email_Customer_Processing_Order';

export default function Edit() {
	const { postSlug } = useSelect(
		( select ) => ( {
			postSlug: select( editorStore ).getCurrentPost?.()?.slug,
		} ),
		[]
	);

	const iframeRef = useRef< HTMLIFrameElement | null >( null );
	const [ isHovered, setIsHovered ] = useState( false );

	const previewUrlBase = window.WooCommerceEmailEditor?.block_preview_url;

	useEffect( () => {
		if ( ! postSlug ) {
			return;
		}

		// current email type
		const currentEmailType = getEmailType( postSlug || '' );
		if ( currentEmailType && iframeRef.current ) {
			updateiFrameSource(
				iframeRef,
				`${ previewUrlBase }&type=${ currentEmailType }`
			);
		}
	}, [ postSlug, iframeRef, previewUrlBase ] );

	return (
		<div
			style={ {
				position: 'relative',
			} }
		>
			<iframe
				style={ {
					width: '100%',
					height:
						iframeRef?.current?.contentWindow?.document?.body
							?.clientHeight || '750px',
					backgroundColor: 'initial',
					minHeight: '100px',
				} }
				ref={ iframeRef }
				src={ `${ previewUrlBase }&type=${ DEFAULT_EMAIL_TYPE }` }
				title={ __( 'Email preview frame', 'woocommerce' ) }
				onMouseEnter={ () => {
					setIsHovered( true );
					updateIFrameBackgroundColor( iframeRef, true );
				} }
				onMouseLeave={ () => {
					setIsHovered( false );
					updateIFrameBackgroundColor( iframeRef, false );
				} }
			/>
			{ isHovered && (
				<div
					style={ {
						position: 'absolute',
						top: '50%',
						left: '50%',
						transform: 'translate(-50%, -50%)',
						zIndex: 1000,
						pointerEvents: 'none', // This ensures hover events pass through to the iframe
					} }
				>
					<HoverContent />
				</div>
			) }
		</div>
	);
}
